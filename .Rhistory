shiny::runApp()
runApp()
Datos$Color
runApp()
Datos <- read.csv("C:/FJRA/2017/PET_PROJECTS/CRIME_01/DATA/DatosMap.csv", sep = ",")
Datos$Color
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/DATA/"
FECHA <- fread(paste0(RUTA, "DATOS_NYC_ANIO.csv"), sep = ",")[, c(1,2)]
library(data.table)
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/DATA/"
FECHA <- fread(paste0(RUTA, "DATOS_NYC_ANIO.csv"), sep = ",")[, c(1,2)]
FECHA
fread(paste0(RUTA, "DATOS_NYC_ANIO.csv"), sep = ",")
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/DATA/"
CATEGORY <- fread(paste0(RUTA, "DATOS_NYC_ANIO.csv"), sep = ",")[, c(3,9)]
CATEGORY
Commits <- table(CATEGORY$Color) / nrow(CATEGORY)
Commits
Color <- CATEGORY$Color
Commits <- cbind(Color, Commits)
Color <- names(Commits)
Commits <- cbind(Color, Commits)
Commits
Commits <- table(CATEGORY$Color) / nrow(CATEGORY)
Color <- names(Commits)
Commits
Color
cbind(Color, Commits)
Commits <- table(CATEGORY$Color) / nrow(CATEGORY)
Color <- names(Commits)
Commits <- cbind(Color, as.numeric(Commits))
Commits
Commits <- as.numeric(table(CATEGORY$Color) / nrow(CATEGORY))
Commits
Color <- names(Commits)
Commits <- cbind(Color, Commits)
Commits
cbind(Color, Commits)
Color
Commits <- as.numeric(table(CATEGORY$Color) / nrow(CATEGORY))
Commits1 <- table(CATEGORY$Color) / nrow(CATEGORY)
Color <- names(Commits1)
Commits <- cbind(Color, Commits)
Commits
Commits <- table(CATEGORY$Color) / nrow(CATEGORY)
Color <- names(Commits)
Commits <- cbind(Color, Commits)
Commits
Commits <- table(CATEGORY$Color) / nrow(CATEGORY)
Color <- names(Commits)
Commits <- cbind(Color, Commits)
Commits$Commits
Commits <- table(CATEGORY$Color) / nrow(CATEGORY)
Color <- names(Commits)
Commits <- data.frame(Color, Commits)
Commits
Commits <- table(CATEGORY$Color) / nrow(CATEGORY)
Commits
Commits <- table(CATEGORY$Color) / nrow(CATEGORY)
Color <- names(Commits)
Commits <- data.frame(Color, Commits, row.names = FALSE)
Commits <- data.frame(Color, Commits, row.names = "")
Commits <- data.frame(Color, Commits)
Commits
CATEGORY <- fread(paste0(RUTA, "DATOS_NYC_ANIO.csv"), sep = ",")[, c(3,9)]
Commits <- table(CATEGORY$Color) / nrow(CATEGORY)
Color <- names(Commits)
Commits <- data.frame(Color, Commits)
names(Commits) <- c("Color", "c", "Prob")
Commits <- Commits[, c(1,3)]
Commits
Probability_Category_Table <- function()
{
library(data.table)
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/DATA/"
CATEGORY <- fread(paste0(RUTA, "DATOS_NYC_ANIO.csv"), sep = ",")[, c(3,9)]
Commits <- table(CATEGORY$Color) / nrow(CATEGORY)
Color <- names(Commits)
Commits <- data.frame(Color, Commits)
names(Commits) <- c("Color", "c", "Prob")
Commits <- Commits[, c(1,3)]
return(Commits)
}
write.csv(Probability_Category_Table(),paste0(RUTA, "Category_Matrix.csv"), row.names = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
RUTA = "C:/FJRA/2017/PET_PROJECTS/CRIME_01/MAPAS/DATA/"
ProbMatrix <- read.csv(paste0(RUTA,"DayHour_Matrix.csv"), sep = ",")
ProbCatMatrix <- read.csv(paste0(RUTA,"Category_Matrix.csv"), sep = ",")
runApp()
runApp()
library(data.table)
library(ggplot2)
#DATOS_NYC <- fread(paste0(RUTA, "NYPD_Complaint_Data_Current_YTD.csv"), sep = ";")
anio_actual = 2017
anio_histor = 2016
Serie_Historica <- function (anio_inicial = 2012, anio_histor)
{
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/DATA/"
#Serie de datos Histórica desde 2012
DATOS_NYC_Hist <- fread(paste0(RUTA, "NYPD_Complaint_Map__Historic.csv"), sep = ";")
#Se eliminan datos sin fecha, hay muy pocos en comparación al total de la población
DATOS_NYC_Hist_2012 <- DATOS_NYC_Hist [which(DATOS_NYC_Hist$CMPLNT_FR_DT != ""),]
DATOS_NYC_Hist_2012 <- DATOS_NYC_Hist_2012 [which(is.na(DATOS_NYC_Hist_2012$CMPLNT_FR_DT) == FALSE),]
#Se separan los elementos temporales
DATOS_NYC_Hist_2012$Year <- as.numeric(substr(DATOS_NYC_Hist_2012$CMPLNT_FR_DT,7,10))
DATOS_NYC_Hist_2012$Day <- as.numeric(substr(DATOS_NYC_Hist_2012$CMPLNT_FR_DT,4,5))
DATOS_NYC_Hist_2012$Month <- as.numeric(substr(DATOS_NYC_Hist_2012$CMPLNT_FR_DT,1,2))
DATOS_NYC_Hist_2012$Hour <- as.numeric(substr(DATOS_NYC_Hist_2012$CMPLNT_FR_TM,1,2))
#Se eliminan datos anteriores al 2012 y posteriores a anio_histor
DATOS_NYC_Hist_2012 <- DATOS_NYC_Hist_2012 [which(DATOS_NYC_Hist_2012$Year >= anio_inicial &
DATOS_NYC_Hist_2012$Year <= anio_histor),]
#Se construye la serie
SERIE_NYC_Hist <- DATOS_NYC_Hist_2012[, .N,by=.(Year,Month)]
SERIE_NYC_Hist <- SERIE_NYC_Hist[order(Year, Month, N)]
names(SERIE_NYC_Hist) <- c("Year", "Month", "Crimes")
SERIE_NYC_Hist$YearMonth <- seq(as.Date('2012-01-01'), by='month', length=((anio_histor - anio_inicial + 1) * 12))
#Se dibuja la serie mensual
plot(SERIE_NYC_Hist$YearMonth, SERIE_NYC_Hist$Crimes, type ="l",
xlab = "Month", ylab = "Number of Crimes")
return(SERIE_NYC_Hist)
}
Serie_Actual <- function (anio_actual)
{
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/DATA/"
#Serie de datos año actual (hay que comprobar que se tienen datos, si no, no se ejecuta
#esta función)
DATOS_NYC_Actual <- fread(paste0(RUTA, "NYPD_Complaint_Data_Current_YTD.csv"), sep = ";")
#Se eliminan datos sin fecha, hay muy pocos en comparación al total de la población
DATOS_NYC_Actual <- DATOS_NYC_Actual [which(DATOS_NYC_Actual$CMPLNT_FR_DT != ""),]
DATOS_NYC_Actual <- DATOS_NYC_Actual [which(is.na(DATOS_NYC_Actual$CMPLNT_FR_DT) == FALSE),]
#Se separan los elementos temporales
DATOS_NYC_Actual$Year <- as.numeric(substr(DATOS_NYC_Actual$CMPLNT_FR_DT,7,10))
DATOS_NYC_Actual$Day <- as.numeric(substr(DATOS_NYC_Actual$CMPLNT_FR_DT,4,5))
DATOS_NYC_Actual$Month <- as.numeric(substr(DATOS_NYC_Actual$CMPLNT_FR_DT,1,2))
DATOS_NYC_Actual$Hour <- as.numeric(substr(DATOS_NYC_Actual$CMPLNT_FR_TM,1,2))
#Se eliminan datos de fuera del anio actual
DATOS_NYC_Actual <- DATOS_NYC_Actual [which(DATOS_NYC_Actual$Year >= anio_actual &
DATOS_NYC_Actual$Month >= 1 &
DATOS_NYC_Actual$Month <= 12),]
#Se construye la serie
SERIE_NYC_Actual <- DATOS_NYC_Actual[, .N,by=.(Year,Month)]
SERIE_NYC_Actual <- SERIE_NYC_Actual[order(Year, Month, N)]
names(SERIE_NYC_Actual) <- c("Year", "Month", "Crimes")
SERIE_NYC_Actual$YearMonth <- seq(as.Date(paste0(anio_actual,"-01-01")), by='month', length= max(SERIE_NYC_Actual$Month))
return(SERIE_NYC_Actual)
}
Crea_Serie_Unica <- function(anio_actual, SERIE_Hist, SERIE_Act)
{
SERIE_CRIMEN <- SERIE_Hist
if (nrow(SERIE_Act) >= 1){
SERIE_CRIMEN <- rbind(SERIE_Hist, SERIE_Act)
}
#Se dibuja la serie mensual
plot(SERIE_CRIMEN$YearMonth, SERIE_CRIMEN$Crimes, type ="l",
xlab = "Month", ylab = "Number of Crimes")
return(SERIE_CRIMEN)
}
Modelo_con_Backstesting <- function (SERIE, p, d, q, P, D, Q, periodo, mesback)
{
#mesback = 6
#p = 1
#d = 1
#q = 0
#P = 1
#D = 0
#Q = 1
SERIE_back <- SERIE_CRIMEN [1:(nrow(SERIE_CRIMEN) - mesback + 1), ]
M_back <- arima(SERIE_back$Crimes, order = c(p, d, q),
seasonal = list(order = c(P, D, Q), period = periodo),
include.mean = FALSE)
Back <- as.vector(predict(M_back, n.ahead = mesback)$pred)
Real <- SERIE_CRIMEN[(nrow(SERIE_CRIMEN) - mesback + 1) :(nrow(SERIE_CRIMEN)),3]
Fiabilidad_Agregada = abs(sum(Back - Real)/sum(Real))
Fiabilidad_EAMR = mean(abs(Back - t(Real))) / mean(t(Real))
Fiabilidad_ECMR = (mean(abs(Back - t(Real))**2))**0.5 / mean(t(Real))
Modelo <- arima(SERIE_CRIMEN$Crimes, order = c(p, d, q),
seasonal = list(order = c(P, D, Q), period = periodo),
include.mean = FALSE)
Prediccion <- as.vector(predict(Modelo, n.ahead = mesback)$pred)
Lista_final <- list(Prediccion, Fiabilidad_Agregada, Fiabilidad_EAMR, Fiabilidad_ECMR)
return(Lista_final)
}
#Se dibuja Serie y predicción
Dibuja_con_Pred <- function (Prediccion, SERIE)
{
SERIE_CRIMEN <- SERIE
SERIE_CRIMEN_pred$YearMonth <- seq(as.Date(paste0(SERIE_CRIMEN$YearMonth[length(SERIE_CRIMEN$YearMonth)])),
by='month', length= nhor + 1)[1: nhor + 1]
SERIE_CRIMEN_pred$Crimes <- Prediccion
SERIE_CRIMEN_TOTAL_x <- c(SERIE_CRIMEN$YearMonth, SERIE_CRIMEN_pred$YearMonth)
SERIE_CRIMEN_TOTAL_y <- c(SERIE_CRIMEN$Crimes, SERIE_CRIMEN_pred$Crimes)
plot(SERIE_CRIMEN_TOTAL_x, SERIE_CRIMEN_TOTAL_y, type ="l",
xlab = "Month", ylab = "Number of Crimes", col = "red")
lines(SERIE_CRIMEN$YearMonth, SERIE_CRIMEN$Crimes, type ="l",
xlab = "Month", ylab = "Number of Crimes")
}
SERIE_Hist <- Serie_Historica(2012, anio_histor)
SERIE_Act <- Serie_Actual(anio_actual)
SERIE_CRIMEN <- Crea_Serie_Unica(anio_actual, SERIE_Hist, SERIE_Act)
nhor = 6
Prediccion_Crimen <- Modelo_con_Backstesting(SERIE_CRIMEN, 1, 1, 0, 1, 1, 0, 12, nhor)
Dibuja_con_Pred(Prediccion_Crimen[[1]], SERIE_CRIMEN)
SERIE_Hist
SERIE_Act
SERIE_CRIMEN
nhor = 6
Prediccion_Crimen <- Modelo_con_Backstesting(SERIE_CRIMEN, 1, 1, 0, 1, 1, 0, 12, nhor)
Dibuja_con_Pred(Prediccion_Crimen[[1]], SERIE_CRIMEN)
SERIE_CRIMEN
Prediccion_Crimen
write.csv(SERIE_CRIME, paste0(RUTA, "SERIE_CRIMEN.csv"), row.names = FALSE)
write.csv(SERIE_CRIMEN, paste0(RUTA, "SERIE_CRIMEN.csv"), row.names = FALSE)
Modelo_con_Backstesting(SERIE_CRIMEN, 1, 1, 0, 1, 1, 0, 12, nhor)
Time_Series <- read.csv(paste0(RUTA,"SERIE_CRIMEN.csv"), sep = ",")
Modelo_con_Backstesting <- function (SERIE, p, d, q, P, D, Q, periodo, mesback)
{
#mesback = 6
#p = 1
#d = 1
#q = 0
#P = 1
#D = 0
#Q = 1
SERIE_back <- SERIE_CRIMEN [1:(nrow(SERIE_CRIMEN) - mesback + 1), ]
M_back <- arima(SERIE_back$Crimes, order = c(p, d, q),
seasonal = list(order = c(P, D, Q), period = periodo),
include.mean = FALSE)
Back <- as.vector(predict(M_back, n.ahead = mesback)$pred)
Real <- SERIE_CRIMEN[(nrow(SERIE_CRIMEN) - mesback + 1) :(nrow(SERIE_CRIMEN)),3]
Fiabilidad_Agregada = abs(sum(Back - Real)/sum(Real))
Fiabilidad_EAMR = mean(abs(Back - t(Real))) / mean(t(Real))
Fiabilidad_ECMR = (mean(abs(Back - t(Real))**2))**0.5 / mean(t(Real))
Modelo <- arima(SERIE_CRIMEN$Crimes, order = c(p, d, q),
seasonal = list(order = c(P, D, Q), period = periodo),
include.mean = FALSE)
Prediccion <- as.vector(predict(Modelo, n.ahead = mesback)$pred)
Lista_final <- list(Prediccion, Fiabilidad_Agregada, Fiabilidad_EAMR, Fiabilidad_ECMR)
return(Lista_final)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Prediccion_Crimen
runApp()
runApp()
shiny::runApp()
RUTA = "C:/FJRA/2017/PET_PROJECTS/CRIME_01/MAPAS4/DATA/"
Time_Series <- read.csv(paste0(RUTA,"SERIE_CRIMEN.csv"), sep = ",")
runApp()
runApp()
runApp()
#Matrices de Tasas por Tipo de Violent Crime
Probability_Violent_Crime_Table <- function()
{
library(data.table)
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/DATA/"
DATOS_NYC_ANIO <- fread(paste0(RUTA,
"DATOS_NYC_ANIO.csv"), sep = ",")
Crime_Categories <- names(table(DATOS_NYC_ANIO$Clasificacion))
Crime_Prop <- round(table(DATOS_NYC_ANIO$Clasificacion) / nrow(DATOS_NYC_ANIO),6)
Auxiliar <- data.frame(cbind((Crime_Categories), (Crime_Prop)), row.names = NULL)
Categories <-Auxiliar
names(Categories) <- c("Clasificacion", "Proportion")
Categories_Def <- Categories[which(Categories$Clasificacion == "ASSAULT" | Categories$Clasificacion == "BURGLARY" |
Categories$Clasificacion == "LARCENY THEFT" | Categories$Clasificacion == "MURDER" |
Categories$Clasificacion == "RAPE" | Categories$Clasificacion == "ROBBERY" |
Categories$Clasificacion == "VEHICLE THEFT"),]
return(Categories_Def)
}
Probability_Violent_Crime_Table()
Probability_WeekD_Hour_Table <- function()
{
library(data.table)
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/DATA/"
FECHA <- fread(paste0(RUTA, "DATOS_NYC_ANIO.csv"), sep = ",")[, c(1,2)]
FECHA$weekd <- weekdays(as.Date(FECHA$CMPLNT_FR_DT, format = "%m/%d/%Y"), abbreviate = TRUE)
FECHA$weekd <- ifelse(FECHA$weekd == "Mon", "D1", FECHA$weekd)
FECHA$weekd <- ifelse(FECHA$weekd == "Tue", "D2", FECHA$weekd)
FECHA$weekd <- ifelse(FECHA$weekd == "Wed", "D3", FECHA$weekd)
FECHA$weekd <- ifelse(FECHA$weekd == "Thu", "D4", FECHA$weekd)
FECHA$weekd <- ifelse(FECHA$weekd == "Fri", "D5", FECHA$weekd)
FECHA$weekd <- ifelse(FECHA$weekd == "Sat", "D6", FECHA$weekd)
FECHA$weekd <- ifelse(FECHA$weekd == "Sun", "D7", FECHA$weekd)
FECHA$Hour  <- substr(FECHA$CMPLNT_FR_TM, 1, 2)
Commits <- table(FECHA$Hour, FECHA$weekd) / nrow(FECHA)
Hora <- 0:23
Commits <- cbind(Hora, Commits)
return(Commits)
}
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/MAPAS/DATA/"
write.csv(Probability_WeekD_Hour_Table(),paste0(RUTA, "DayHour_Matrix.csv"), row.names = FALSE)
Probability_Category_Table <- function()
{
library(data.table)
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/DATA/"
CATEGORY <- fread(paste0(RUTA, "DATOS_NYC_ANIO.csv"), sep = ",")[, c(3,9)]
Commits <- table(CATEGORY$Color) / nrow(CATEGORY)
Color <- names(Commits)
Commits <- data.frame(Color, Commits)
names(Commits) <- c("Color", "c", "Prob")
Commits <- Commits[, c(1,3)]
return(Commits)
}
write.csv(Probability_Category_Table(),paste0(RUTA, "Category_Matrix.csv"), row.names = FALSE)
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/MAPAS/DATA/"
Matrix1 <- read.csv(paste0(RUTA, "DayHour_Matrix.csv"), sep = ",")
Matrix1
colSums(Matrix1)
Day_Vector <- colSums(Matrix1)[,c(2:8)]
c(2:8)
colSums(Matrix1)[c(2:8)]
Day_Vector <- colSums(Matrix1)[c(2:8)]
rowSums(Matrix1)
rowSums(Matrix1[,c(2:8)])
Agrega_Day_Hour <- function(Day, Hour){
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/MAPAS/DATA/"
Matrix1 <- read.csv(paste0(RUTA, "DayHour_Matrix.csv"), sep = ",")
Day_Vector <- colSums(Matrix1)[c(2:8)]
Hour_Vector <- rowSums(Matrix1[,c(2:8)])
Day_Agg = Day_Vector[Day]
Hour_Agg = Hour_Vector_Vector[Hour]
Agg <- c(Day_Agg, Hour_Agg)
return(Agg)
}
Day = 3
Hour = 10
Agrega_Day_Hour(Day, Hour)
Agrega_Day_Hour <- function(Day, Hour){
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/MAPAS/DATA/"
Matrix1 <- read.csv(paste0(RUTA, "DayHour_Matrix.csv"), sep = ",")
Day_Vector <- colSums(Matrix1)[c(2:8)]
Hour_Vector <- rowSums(Matrix1[,c(2:8)])
Day_Agg = Day_Vector[Day]
Hour_Agg = Hour_Vector_Vector[Hour]
Agg <- c(Day_Agg, Hour_Agg)
return(Agg)
}
Day = 3
Hour = 10
Agrega_Day_Hour(Day, Hour)
Agrega_Day_Hour <- function(Day, Hour){
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/MAPAS/DATA/"
Matrix1 <- read.csv(paste0(RUTA, "DayHour_Matrix.csv"), sep = ",")
Day_Vector <- colSums(Matrix1)[c(2:8)]
Hour_Vector <- rowSums(Matrix1[,c(2:8)])
Day_Agg = Day_Vector[Day]
Hour_Agg = Hour_Vector[Hour]
Agg <- c(Day_Agg, Hour_Agg)
return(Agg)
}
Day = 3
Hour = 10
Agrega_Day_Hour(Day, Hour)
Agrega_Day_Hour <- function(Day, Hour){
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/MAPAS/DATA/"
Matrix1 <- read.csv(paste0(RUTA, "DayHour_Matrix.csv"), sep = ",")
Day_Vector <- colSums(Matrix1)[c(2:8)]
Hour_Vector <- rowSums(Matrix1[,c(2:8)])
Day_Agg = Day_Vector[Day]
Hour_Agg = Hour_Vector[Hour]
Agg <- vector(c(Day_Agg, Hour_Agg))
return(Agg)
}
Day = 3
Hour = 10
Agrega_Day_Hour(Day, Hour)
Agrega_Day_Hour <- function(Day, Hour){
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/MAPAS/DATA/"
Matrix1 <- read.csv(paste0(RUTA, "DayHour_Matrix.csv"), sep = ",")
Day_Vector <- colSums(Matrix1)[c(2:8)]
Hour_Vector <- rowSums(Matrix1[,c(2:8)])
Day_Agg = Day_Vector[Day]
Hour_Agg = Hour_Vector[Hour]
Agg <- (c(Day_Agg, Hour_Agg))
return(Agg)
}
Day = 3
Hour = 10
Agrega_Day_Hour(Day, Hour)
#Agregar por dia y hora
Agrega_Day_Hour <- function(Day, Hour){
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/MAPAS/DATA/"
Matrix1 <- read.csv(paste0(RUTA, "DayHour_Matrix.csv"), sep = ",")
Day_Vector <- colSums(Matrix1)[c(2:8)]
Hour_Vector <- rowSums(Matrix1[,c(2:8)])
Day_Agg = Day_Vector[Day]
Hour_Agg = Hour_Vector[Hour]
Agg <- (cbind(Day_Agg, Hour_Agg))
return(Agg)
}
Day = 3
Hour = 10
Agrega_Day_Hour(Day, Hour)
Day = 5
Hour = 10
Agrega_Day_Hour(Day, Hour)
runApp()
runApp()
runApp()
runApp()
Agrega_Day_Hour <- function(Day, Hour){
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/MAPAS/DATA/"
Matrix1 <- read.csv(paste0(RUTA, "DayHour_Matrix.csv"), sep = ",")
Day_Vector <- colSums(Matrix1)[c(2:8)]
Hour_Vector <- rowSums(Matrix1[,c(2:8)])
Day_Agg = Day_Vector[Day]
Hour_Agg = Hour_Vector[Hour]
Agg <- (cbind(Day_Agg, Hour_Agg))
return(Agg)
}
Day = 5
Hour = 10
Matrix1 <- read.csv(paste0(RUTA, "DayHour_Matrix.csv"), sep = ",")
RUTA <- "C:/FJRA/2017/PET_PROJECTS/CRIME_01/MAPAS/DATA/"
Matrix1 <- read.csv(paste0(RUTA, "DayHour_Matrix.csv"), sep = ",")
Day_Vector <- colSums(Matrix1)[c(2:8)]
Hour_Vector <- rowSums(Matrix1[,c(2:8)])
Hour_Vector
Day_Agg = Day_Vector[Day]
Day_Agg
Hour_Agg = Hour_Vector[Hour]
Hour_Agg
runApp()
shiny::runApp()
RUTA = "C:/FJRA/2017/PET_PROJECTS/CRIME_01/MAPAS4/DATA/"
Hour = 2
Day = 1
Cat = "grey"
ProbMatrix <- read.csv(paste0(RUTA,"DayHour_Matrix.csv"), sep = ",")
ProbCatMatrix <- read.csv(paste0(RUTA,"Category_Matrix.csv"), sep = ",")
CrimeProb <- ProbMatrix[which(ProbMatrix$Hora == Hour), Day + 1]
CrimeProbCat <- ProbMatrix[which(ProbCatMatrix$Color == Cat), 2]
CrimeProbCat
CrimeProbCat <- ProbCatMatrix[which(ProbCatMatrix$Color == Cat), 2]
CrimeProbCat
runApp()
shiny::runApp()
